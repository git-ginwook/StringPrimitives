Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/14/22 07:48:54
$Project 6     (project6_leeginw.asm			     Page 1 - 1


				TITLE Project 6     (project6_leeginw.asm)

				; Author: GinWook Lee
				; Last Modified: 3/11/2022
				; OSU email address: leeginw@oregonstate.edu
				; Course number/section: CS271 Section 400
				; Project Number: 06                 
				; Due Date: 3/13/2022
				; Description: This program asks for 10 integers and displays a list, sum, and average of those integers.
				;		Each integer must fit in a 32-register (-2^31 to 2^31-1). Otherwise, the program invalidates such input.
				;
				;		The program takes user input as a string of characters, validates and converts each number to ASCII.
				;		Then, ASCII are converted back to numbers for sum and average calculations.
				;		Once all numbers are calculated, each number reverts back to ASCII for display.		
				;	
				;	input assumptions: (no validation) 
				;		1) no arithematic calculations (e.g., "12379+893", "180-2879", "1123x19")
				;		2) sum of any two integers won't exceed a 32-register

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; ------------------------------------------------------------------------
				; Name: mGetString
				; Description: display input prompt and get user input in inputString
				;
				; Receives:
				;	- parameters:'input_msg' (reference, input), 'inputString' (reference, input),
				;			'countAllowed'(value, input), 'inputLength' (value, input)
				; ------------------------------------------------------------------------
				mGetString	MACRO		input, string, count, length
					; preserve registers
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					
					; display input prompt
					MOV		EDX, input						; OFFSET input_msg
					CALL	WriteString
					
					; read user input
					MOV		EDX, string						; OFFSET inputString
					MOV		ECX, count						; countAllowed (13)
					CALL	ReadString
					MOV		length, EAX
					
					; restore registers
					POP		EAX
					POP		ECX
					POP		EDX

				ENDM

				; ------------------------------------------------------------------------
				; Name: mDisplayString
				; Description: display one valid user input at a time
				;
				; Receives:
				;	- parameters: string (reference, input), 'count' (value, input)
				; ------------------------------------------------------------------------
				mDisplayString MACRO	string, count
					LOCAL	_displayLoop
					; preserve registers
					PUSH	ESI
					PUSH	ECX
					
					MOV		ECX, count

					MOV		ESI, string	
					DEC		ESI	

					; display characters in a numeric value
				_displayLoop:	
					STD	
					LODSB

					CALL	WriteChar
					LOOP	_displayLoop

					CLD

					; restore registers
					POP		ECX
					POP		ESI

				ENDM


				; global constants
 = 0000000A			ARRAYSIZE = 10
 = 000001F4			LENGTH_LIMIT = 500								; extra space in case of a zero-padded number

 =-80000000			MIN = -2147483648								; -2^31 (the lowest value that fits into a 32-register

				; ASCII
 = 00000020			SPACE = 32
 = 0000002C			COMMA = 44
 = 0000002B			PLUS = 43
 = 0000002D			MINUS = 45
 = 00000030			ZERO = 48


 00000000			.data

				; prompt variables
 00000000 50 72 6F 6A 65	intro_msg		BYTE		"Project 6: Low-Level I/O Procedures",13,10
	   63 74 20 36 3A
	   20 4C 6F 77 2D
	   4C 65 76 65 6C
	   20 49 2F 4F 20
	   50 72 6F 63 65
	   64 75 72 65 73
	   0D 0A
 00000025  57 72 69 74 74					BYTE		"Written by GinWook Lee",13,10,13,10
	   65 6E 20 62 79
	   20 47 69 6E 57
	   6F 6F 6B 20 4C
	   65 65 0D 0A 0D
	   0A
 0000003F  50 6C 65 61 73					BYTE		"Please enter 10 signed decimal integers. "
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   20
 00000068  45 61 63 68 20					BYTE		"Each integer needs to be able to fit in a 32-bit register.",13,10
	   69 6E 74 65 67
	   65 72 20 6E 65
	   65 64 73 20 74
	   6F 20 62 65 20
	   61 62 6C 65 20
	   74 6F 20 66 69
	   74 20 69 6E 20
	   61 20 33 32 2D
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 0D 0A
 000000A4  4F 6E 63 65 20					BYTE		"Once all inputs are in, this program will display: ",13,10
	   61 6C 6C 20 69
	   6E 70 75 74 73
	   20 61 72 65 20
	   69 6E 2C 20 74
	   68 69 73 20 70
	   72 6F 67 72 61
	   6D 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 3A
	   20 0D 0A
 000000D9  09 31 29 20 31					BYTE		"	1) 10 valid integers entered",13,10
	   30 20 76 61 6C
	   69 64 20 69 6E
	   74 65 67 65 72
	   73 20 65 6E 74
	   65 72 65 64 0D
	   0A
 000000F8  09 32 29 20 73					BYTE		"	2) sum and average of those integers",13,10,13,10,0
	   75 6D 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 20
	   6F 66 20 74 68
	   6F 73 65 20 69
	   6E 74 65 67 65
	   72 73 0D 0A 0D
	   0A 00

 00000122 50 6C 65 61 73	input_msg		BYTE		"Please enter a signed decimal integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 3A 20 00
 0000014A 45 52 52 4F 52	error_msg		BYTE		"ERROR: your number is either too big or not a signed decimal integer.",13,10,0
	   3A 20 79 6F 75
	   72 20 6E 75 6D
	   62 65 72 20 69
	   73 20 65 69 74
	   68 65 72 20 74
	   6F 6F 20 62 69
	   67 20 6F 72 20
	   6E 6F 74 20 61
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 2E 0D
	   0A 00

 00000192 0D 0A 31 30 20	array_msg		BYTE		13,10,"10 valid integers you entered: ",13,10,0
	   76 61 6C 69 64
	   20 69 6E 74 65
	   67 65 72 73 20
	   79 6F 75 20 65
	   6E 74 65 72 65
	   64 3A 20 0D 0A
	   00
 000001B6 0D 0A 54 68 65	sum_msg			BYTE		13,10,"The sum of 10 valid integers you entered: ",0
	   20 73 75 6D 20
	   6F 66 20 31 30
	   20 76 61 6C 69
	   64 20 69 6E 74
	   65 67 65 72 73
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 3A 20 00
 000001E3 0D 0A 54 68 65	avg_msg			BYTE		13,10,"The truncated average (to the nearest decimal): ", 0
	   20 74 72 75 6E
	   63 61 74 65 64
	   20 61 76 65 72
	   61 67 65 20 28
	   74 6F 20 74 68
	   65 20 6E 65 61
	   72 65 73 74 20
	   64 65 63 69 6D
	   61 6C 29 3A 20
	   00

 00000216 0D 0A 0D 0A 54	farewell_msg	BYTE		13,10,13,10,"Thanks for playing!",0
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   70 6C 61 79 69
	   6E 67 21 00

				; global variables
 0000022E  0000000A [		inputArray		SDWORD		ARRAYSIZE DUP(?)
	    00000000
	   ]

 00000256 00000000		inputLength		DWORD		?
 0000025A 000001F5		countAllowed	DWORD		LENGTH_LIMIT+1
 0000025E  000001F4 [		inputString		BYTE		LENGTH_LIMIT DUP(?)
	    00
	   ]

 00000452 00000000		errorFlag		DWORD		?


 00000456  000001F4 [		displayString	BYTE		LENGTH_LIMIT DUP(?)
	    00
	   ]


 00000000			.code
 00000000			main PROC

					; program introduction
 00000000  68 00000000 R		PUSH	OFFSET		intro_msg
 00000005  E8 0000005B			CALL	introduction
					
					; read valid user input 10 times
 0000000A  B9 0000000A			MOV		ECX, ARRAYSIZE						; set number of valid inputs
 0000000F  BF 0000022E R		MOV		EDI, OFFSET inputArray				; EDI point to inputArray to store valid user inputs

 00000014			_readLoop:
 00000014  68 00000452 R		PUSH	OFFSET		errorFlag				; EBP+28
 00000019  68 0000014A R		PUSH	OFFSET		error_msg				; EBP+24
 0000001E  FF 35 00000256 R		PUSH	inputLength							; EBP+20
 00000024  FF 35 0000025A R		PUSH	countAllowed						; EBP+16
 0000002A  68 0000025E R		PUSH	OFFSET		inputString				; EBP+12
 0000002F  68 00000122 R		PUSH	OFFSET		input_msg				; EBP+8
 00000034  E8 0000003D			CALL	ReadVal	
					
 00000039  E2 D9			LOOP	_readLoop

					; display integer list along with sum and average of those integers
 0000003B  68 00000216 R		PUSH	OFFSET		farewell_msg			; EBP+28
 00000040  68 000001E3 R		PUSH	OFFSET		avg_msg					; EBP+24
 00000045  68 000001B6 R		PUSH	OFFSET		sum_msg					; EBP+20
 0000004A  68 00000456 R		PUSH	OFFSET		displayString			; EBP+16
 0000004F  68 00000192 R		PUSH	OFFSET		array_msg				; EBP+12
 00000054  68 0000022E R		PUSH	OFFSET		inputArray				; EBP+8
 00000059  E8 0000012D			CALL	WriteVal

					Invoke ExitProcess,0						; exit to operating system
 0000005E  6A 00	   *	    push   +000000000h
 00000060  E8 00000000 E   *	    call   ExitProcess
 00000065			main ENDP


				; ------------------------------------------------------------------------
				; Name: introduction
				; Description: introduce the program to the user.
				;
				; Preconditions: no precondition.
				; Postconditions: no change.
				;
				; Receives: program introduction and description prompt from 'main' procedure.
				;		- parameter: 'intro_msg' (reference, input)
				; Returns: display program title and description.
				; ------------------------------------------------------------------------
 00000065			introduction	PROC USES EBP
 00000065  55		   *	    push   ebp
 00000066  8B EC			MOV		EBP, ESP
					
 00000068  52				PUSH	EDX									; preserve register

 00000069  8B 55 08			MOV		EDX, [EBP+8]						; OFFSET intro_msg
 0000006C  E8 00000000 E		CALL	WriteString

 00000071  5A				POP		EDX									; restore register

 00000072  5D		   *	    pop    ebp
 00000073  C2 0004			RET		4
 00000076			introduction	ENDP

				; ------------------------------------------------------------------------
				; Name: ReadVal
				; Description: ask for user input, validate and convert through Conversion procedure,
				;		and fill inputArray one at a time with a valid user input.
				;
				; Preconditions: EDI is pointing to the next byte to store next valid user input
				; Postconditions: EDI points to the last value(10th) of inputArray
				;
				; Receives: 
				;		- parameters: 'input_msg' (reference, input), 'inputString' (reference, input),
				;			'countAllowed'(value, input), 'inputLength' (value, input),
				;			'error_msg' (reference, input), 'error_flag' (reference, input)
				; Returns: inputArray is filled with 10 valid user inputs
				; ------------------------------------------------------------------------

 00000076			ReadVal			PROC USES EBP
 00000076  55		   *	    push   ebp
 00000077  8B EC			MOV		EBP, ESP

					; preserve registers
 00000079  50				PUSH	EAX
 0000007A  56				PUSH	ESI
 0000007B  53				PUSH	EBX
 0000007C  51				PUSH	ECX

					; call macro with parameters: OFFSET input, OFFSET string, count, length
 0000007D			_getAgain:
					mGetString			[EBP+8], [EBP+12], [EBP+16], [EBP+20]
 0000007D  52		     1		PUSH	EDX
 0000007E  51		     1		PUSH	ECX
 0000007F  50		     1		PUSH	EAX
 00000080  8B 55 08	     1		MOV		EDX, [EBP+8]						; OFFSET input_msg
 00000083  E8 00000000 E     1		CALL	WriteString
 00000088  8B 55 0C	     1		MOV		EDX, [EBP+12]						; OFFSET inputString
 0000008B  8B 4D 10	     1		MOV		ECX, [EBP+16]						; countAllowed (13)
 0000008E  E8 00000000 E     1		CALL	ReadString
 00000093  89 45 14	     1		MOV		[EBP+20], EAX
 00000096  58		     1		POP		EAX
 00000097  59		     1		POP		ECX
 00000098  5A		     1		POP		EDX

 00000099  FF 75 1C			PUSH	[EBP+28]							; OFFSET errorFlag
 0000009C  FF 75 14			PUSH	[EBP+20]							; inputLength from mGetString
 0000009F  FF 75 0C			PUSH	[EBP+12]							; OFFSET inputString from mGetString
 000000A2  E8 0000001D			CALL	Conversion

					; check error flag
 000000A7  8B 75 1C			MOV		ESI, [EBP+28]
 000000AA  8B 1E			MOV		EBX, [ESI]
 000000AC  83 FB 00			CMP		EBX, 0
 000000AF  74 0A			JE		_valid								; jump to _valid if no error flag (0)

					; invalid input
 000000B1  8B 55 18			MOV		EDX, [EBP+24]
 000000B4  E8 00000000 E		CALL	WriteString							; display error_msg
					
 000000B9  EB C2			JMP		_getAgain							; return to get user input 

					; valid input
 000000BB			_valid:
 000000BB  AB				STOSD										; EAX to OFFSET inputArray

					; restore registers
 000000BC  59				POP		ECX
 000000BD  5B				POP		EBX
 000000BE  5E				POP		ESI
 000000BF  58				POP		EAX

 000000C0  5D		   *	    pop    ebp
 000000C1  C2 0018			RET		24
 000000C4			ReadVal			ENDP


				; ------------------------------------------------------------------------
				; Name: conversion
				; Description: validate, convert, and return a valid user input to ReadVal procedure.
				;		if input is invalid, display error_msg
				;
				; Preconditions: user input has been entered and its memory address with the length of string
				;		should be passed through the runtime stack
				; Postconditions: user input is validated. Ask for another input in case for invalid.
				;
				; Receives:
				;		- parameters: 'inputString' (reference, input), 'inputLength' (value, input),
				;			'error_flag' (reference, input)
				; Returns: validated input is passed back to ReadVal procedure in EAX register
				; ------------------------------------------------------------------------
 000000C4			Conversion		PROC
					LOCAL	val:SDWORD, error:DWORD, count:DWORD, sign:DWORD

					; preserve registers [except for EAX]
 000000C4  55		   *	    push   ebp
 000000C5  8B EC	   *	    mov    ebp, esp
 000000C7  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 000000CA  56				PUSH	ESI
 000000CB  51				PUSH	ECX
 000000CC  53				PUSH	EBX
 000000CD  52				PUSH	EDX
 000000CE  57				PUSH	EDI

				; -------------------------------------
				; validation!
				; validate user input with the following criteria:
				;	1) check for empty string
				;	2) check for type (character or number)
				;	3) check for sign (first digit only: + or -)
				;
				; following validations are embedded in conversion! section:
				;	1) check for exceeding value
				;	2) check for special cases
				; -------------------------------------

					; initialize registers
 000000CF  8B 75 08			MOV		ESI, [EBP+8]						; point ESI to inputString from mGetString
 000000D2  8B 4D 0C			MOV		ECX, [EBP+12]						; length of inputString to ECX
 000000D5  B8 00000000			MOV		EAX, 0								; initialize EAX
					
					; initialize local variables
 000000DA  C7 45 FC			MOV		val, 0								
	   00000000
 000000E1  C7 45 F8			MOV		error, 0							
	   00000000
 000000E8  C7 45 F4			MOV		count, 0
	   00000000
 000000EF  C7 45 F0			MOV		sign, 0
	   00000000

					; 1) check for empty string
 000000F6  83 F9 00			CMP		ECX, 0								; if length is zero
 000000F9  74 6F			JE		_error

 000000FB  EB 29			JMP		_convert


					; 2) check for type (character or number)
 000000FD			_digitCheck:
					; AL has char
 000000FD  83 7D F4 00			CMP		count, 0							
 00000101  75 1A			JNE		_remainDigit						; if not the first digit, jump to _remainDigit

					; if first digit
 00000103  FF 45 F4			INC		count

 00000106  E8 00000000 E		CALL	IsDigit
 0000010B  74 3E			JZ		_checkedDigit						; valid digit, move to _checkedDigit

					; 3) check for sign (first digit only: + or -)
					; check if -
 0000010D  3C 2D			CMP		AL, MINUS							; - (ASCII)
 0000010F  74 06			JE		_minusVal

					; check if +
 00000111  3C 2B			CMP		AL, PLUS							; + (ASCII)
 00000113  74 05			JE		_plusVal							; no change, jump to _checkedDigit

					; neither a digit, positive, nor negative sign
 00000115  EB 53			JMP		_error

 00000117			_minusVal:
 00000117  FF 45 F0			INC		sign								;change sign if the first char is "-"
 0000011A			_plusVal:
 0000011A  49				DEC		ECX
 0000011B  EB 17			JMP		_convertLoop
					
					; check remaining digits
 0000011D			_remainDigit:
 0000011D  E8 00000000 E		CALL	IsDigit
 00000122  74 27			JZ		_checkedDigit
					
 00000124  EB 44			JMP		_error								; not a digit, then _error

				; -------------------------------------
				; conversion!
				; convert ASCII to numeric values and load into EAX
				; [check for exceed 1 and 2] invalid input if Overflow Flag gets set
				; special cases: -2,147,483,648(valid) and +2,147,483,648(invalid)
				; -------------------------------------
					; reset errorFlag to zero
 00000126			_convert:
 00000126  8B 5D F8			MOV		EBX, error

 00000129  8B 7D 10			MOV		EDI, [EBP+16]
 0000012C  89 1F			MOV		[EDI], EBX

					; conversion setup
 0000012E  8B 75 08			MOV		ESI, [EBP+8]						; point ESI to inputString from mGetString
 00000131  8B 4D 0C			MOV		ECX, [EBP+12]						; length of inputString to ECX


					; convert valid input to signed integer	
 00000134			_convertLoop:
 00000134  8B 45 FC			MOV		EAX, val							; prep EAX for MUL	
 00000137  BB 0000000A			MOV		EBX, 10
 0000013C  F7 E3			MUL		EBX									; multiply by 10 to increase decimal digit

					; [check for exceed 1]
 0000013E  70 21			JO		_overFlow

 00000140  89 45 FC			MOV		val, EAX						

 00000143  B8 00000000			MOV		EAX, 0								; reset EAX
					
 00000148  AC				LODSB										; load one byte from inputString to AL 

 00000149  EB B2			JMP		_digitCheck							; jump to check digit
 0000014B			_checkedDigit:


 0000014B  2C 30			SUB		AL, ZERO							; zero (ASCII)
 0000014D  01 45 FC			ADD		val, EAX							; combine the latest decimal digit

					; [check for exceed 2]
 00000150  70 0F			JO		_overFLow

 00000152  E2 E0			LOOP	_convertLoop						; LOOP until all inputString bytes are converted

 00000154  8B 45 FC			MOV		EAX, val							; preserve valid numeric value in EAX

 00000157  83 7D F0 00			CMP		sign, 0
 0000015B  74 25			JE		_return								; if sign is 0 (positive), jump to _return

 0000015D  F7 D8			NEG		EAX									; if sign is 1 (negative), multiply EAX by -1
 0000015F  EB 21			JMP		_return

					; when overflow status flag is set
 00000161			_overFlow:
					; special case: -2,147,483,648 (valid)
 00000161  81 7D FC			CMP		val, MIN							; MIN = -2,147,483,648
	   80000000
 00000168  74 0D			JE		_special

					; invalid input
 0000016A			_error:
 0000016A  FF 45 F8			INC		error	
 0000016D  8B 5D F8			MOV		EBX, error

 00000170  8B 7D 10			MOV		EDI, [EBP+16]
 00000173  89 1F			MOV		[EDI], EBX

 00000175  EB 0B			JMP		_return

					; validate special cases
 00000177			_special:
					; special case: 2,147,483,648 or +2,147,483,648 (invalid)
 00000177  83 7D F0 00			CMP		sign, 0
 0000017B  74 ED			JE		_error

 0000017D  B8 80000000			MOV		EAX, MIN							; -2,147,483,648 is valid

					; restore registers [except for EAX]
 00000182			_return:
 00000182  5F				POP		EDI
 00000183  5A				POP		EDX
 00000184  5B				POP		EBX
 00000185  59				POP		ECX
 00000186  5E				POP		ESI

 00000187  C9		   *	    leave  
 00000188  C2 000C			RET		12
 0000018B			Conversion		ENDP

				; ------------------------------------------------------------------------
				; Name: WriteVal
				; Description: display a list of valid integers, sum and truncated average of those integers.
				;	Lastly, farewell_msg is shown to the user.
				;
				; Preconditions: 10 valid integers are stored in inputArray.
				; Postconditions: all messages displayed.
				;
				; Receives:
				;	- parameters: 'inputArray' (reference, input), 'array_msg' (reference, input),
				;		'displayString' (reference, input), 'sum_msg' (reference, input), 'avg_msg' (reference, input)
				; Returns: display prompts, list of valid integers, sum and average of those integers, and farewell_msg
				; ------------------------------------------------------------------------
 0000018B			WriteVal		PROC
					LOCAL	sum:SDWORD, avg:SDWORD, count:DWORD

					; preserve registers
 0000018B  55		   *	    push   ebp
 0000018C  8B EC	   *	    mov    ebp, esp
 0000018E  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000191  56				PUSH	ESI
 00000192  50				PUSH	EAX
 00000193  53				PUSH	EBX
 00000194  52				PUSH	EDX
 00000195  57				PUSH	EDI
 00000196  51				PUSH	ECX

					; initial setup
 00000197  B9 0000000A			MOV		ECX, ARRAYSIZE
 0000019C  C7 45 FC			MOV		sum, 0
	   00000000
 000001A3  8B 75 08			MOV		ESI, [EBP+8]						; OFFSET inputArray
					
					; sum calculation
 000001A6			_sumLoop:
 000001A6  AD				LODSD										; load one number at a time: [ESI] -> AL
 000001A7  01 45 FC			ADD		sum, EAX
 000001AA  E2 FA			LOOP	_sumLoop

					; average calculation
 000001AC  C7 45 F8			MOV		avg, 0
	   00000000

 000001B3  8B 45 FC			MOV		EAX, sum
 000001B6  99				CDQ
 000001B7  BB 0000000A			MOV		EBX, ARRAYSIZE						; divide by the number of inputs: 10
 000001BC  F7 FB			IDIV	EBX
					
 000001BE  89 45 F8			MOV		avg, EAX							; quotient only for truncated average

				; -------------------------------------
				; convert number to ASCII: list
				; convert to ASCII and display a list of valid integers
				; -------------------------------------
					; prompt for list of signed integers
 000001C1  8B 55 0C			MOV		EDX, [EBP+12]						; OFFSET array_msg
 000001C4  E8 00000000 E		CALL	WriteString

					; initial setup
 000001C9  B8 00000000			MOV		EAX, 0
 000001CE  BA 00000000			MOV		EDX, 0
 000001D3  B9 0000000A			MOV		ECX, ARRAYSIZE

 000001D8  8B 7D 10			MOV		EDI, [EBP+16]						; OFFSET displayString BYTE
 000001DB  8B 75 08			MOV		ESI, [EBP+8]						; OFFSET inputArray SDWORD

 000001DE  C7 45 F4			MOV		count, 2							; extra counts for space(" ") and comma(",")
	   00000002
					
 000001E5			_loadInteger:	
 000001E5  C6 07 20			MOV		[EDI], BYTE PTR SPACE				; space (ASCII)
 000001E8  47				INC		EDI
 000001E9  C6 07 2C			MOV		[EDI], BYTE PTR COMMA				; comma (ASCII)
 000001EC  47				INC		EDI

 000001ED  AD				LODSD										; [ESI] -> EAX

					; check for a negative value
 000001EE  83 F8 00			CMP		EAX, 0
 000001F1  7D 10			JNL		_integer							; if positive, jump to _integer
					
					; display negative sign
 000001F3  50				PUSH	EAX

 000001F4  B8 00000000			MOV		EAX, 0								; reset EAX
 000001F9  B0 2D			MOV		AL, MINUS							; negative (ASCII)
 000001FB  E8 00000000 E		CALL	WriteChar							; display minus sign
					
 00000200  58				POP		EAX
					
 00000201  F7 D8			NEG		EAX									; multiply by -1

 00000203			_integer:		
 00000203  99				CDQ
 00000204  BA 00000000			MOV		EDX, 0								; reset to zero
 00000209  BB 0000000A			MOV		EBX, 10
 0000020E  F7 FB			IDIV	EBX
					
 00000210  83 C2 30			ADD		EDX, ZERO							; zero (ASCII)
					
 00000213  50				PUSH	EAX
 00000214  8B C2			MOV		EAX, EDX							; move the remainder to EAX
 00000216  AA				STOSB										; AL -> [EDI]
 00000217  58				POP		EAX

 00000218  BA 00000000			MOV		EDX, 0								; reset EDX

 0000021D  FF 45 F4			INC		count								; count number of characters

 00000220  83 F8 00			CMP		EAX, 0								; done when the quotient is zero
 00000223  75 DE			JNE		_integer

					mDisplayString		EDI, count				; read backward using count
 00000225  56		     1		PUSH	ESI
 00000226  51		     1		PUSH	ECX
 00000227  8B 4D F4	     1		MOV		ECX, count
 0000022A  8B F7	     1		MOV		ESI, EDI	
 0000022C  4E		     1		DEC		ESI	
 0000022D		     1	??0000:	
 0000022D  FD		     1		STD	
 0000022E  AC		     1		LODSB
 0000022F  E8 00000000 E     1		CALL	WriteChar
 00000234  E2 F7	     1		LOOP	??0000
 00000236  FC		     1		CLD
 00000237  59		     1		POP		ECX
 00000238  5E		     1		POP		ESI

 00000239  C7 45 F4			MOV		count, 0							; reset count
	   00000000

					; check for the last input (10th)
 00000240  83 F9 02			CMP		ECX, 2
 00000243  74 04			JE		_last								; if last, skip extra counts (no need for comma and space)

 00000245  83 45 F4 02			ADD		count, 2

 00000249			_last:
 00000249  E2 9A			LOOP	_loadInteger

				; -------------------------------------
				; convert number to ASCII: sum
				; convert to ASCII and display sum of 10 valid integers
				; -------------------------------------
					; prompt for sum
 0000024B  8B 55 14			MOV		EDX, [EBP+20]						; OFFSET sum_msg
 0000024E  E8 00000000 E		CALL	WriteString

 00000253  C7 45 F4			MOV		count, 0
	   00000000
 0000025A  8B 45 FC			MOV		EAX, sum

					; check for a negative value
 0000025D  83 F8 00			CMP		EAX, 0
 00000260  7D 10			JNL		_integerSum							; if positive, jump to _integer
					
					; display negative sign
 00000262  50				PUSH	EAX

 00000263  B8 00000000			MOV		EAX, 0								; reset EAX
 00000268  B0 2D			MOV		AL, MINUS							; negative (ASCII)
 0000026A  E8 00000000 E		CALL	WriteChar							; display minus sign
					
 0000026F  58				POP		EAX
					
 00000270  F7 D8			NEG		EAX									; multiply by -1

					; convert sum to ASCII
 00000272			_integerSum:		
 00000272  99				CDQ
 00000273  BA 00000000			MOV		EDX, 0								; reset to zero
 00000278  BB 0000000A			MOV		EBX, 10
 0000027D  F7 FB			IDIV	EBX
					
 0000027F  83 C2 30			ADD		EDX, ZERO							; zero (ASCII)

 00000282  50				PUSH	EAX
 00000283  8B C2			MOV		EAX, EDX	
 00000285  AA				STOSB										; AL -> [EDI]
 00000286  58				POP		EAX

 00000287  BA 00000000			MOV		EDX, 0								; reset EDX

 0000028C  FF 45 F4			INC		count

 0000028F  83 F8 00			CMP		EAX, 0								; done when the quotient is zero
 00000292  75 DE			JNE		_integerSum

					mDisplayString		EDI, count				; read backward using count
 00000294  56		     1		PUSH	ESI
 00000295  51		     1		PUSH	ECX
 00000296  8B 4D F4	     1		MOV		ECX, count
 00000299  8B F7	     1		MOV		ESI, EDI	
 0000029B  4E		     1		DEC		ESI	
 0000029C		     1	??0001:	
 0000029C  FD		     1		STD	
 0000029D  AC		     1		LODSB
 0000029E  E8 00000000 E     1		CALL	WriteChar
 000002A3  E2 F7	     1		LOOP	??0001
 000002A5  FC		     1		CLD
 000002A6  59		     1		POP		ECX
 000002A7  5E		     1		POP		ESI
					
				; -------------------------------------
				; convert number to ASCII: average
				; convert to ASCII and display truncated average of 10 valid integers
				; -------------------------------------
					; prompt for average
 000002A8  8B 55 18			MOV		EDX, [EBP+24]						; OFFSET avg_msg
 000002AB  E8 00000000 E		CALL	WriteString

					; initial setup
 000002B0  C7 45 F4			MOV		count, 0
	   00000000
 000002B7  8B 45 F8			MOV		EAX, avg

					; check for a negative value
 000002BA  83 F8 00			CMP		EAX, 0
 000002BD  7D 10			JNL		_integerAvg							; if positive, jump to _integer

					; display negative sign
 000002BF  50				PUSH	EAX

 000002C0  B8 00000000			MOV		EAX, 0								; reset EAX
 000002C5  B0 2D			MOV		AL, MINUS							; negative (ASCII)
 000002C7  E8 00000000 E		CALL	WriteChar							; display minus sign
					
 000002CC  58				POP		EAX
					
 000002CD  F7 D8			NEG		EAX									; multiply by -1 to revert back to positive integer

					; convert average to ASCII
 000002CF			_integerAvg:		
 000002CF  99				CDQ
 000002D0  BA 00000000			MOV		EDX, 0								; reset to zero
 000002D5  BB 0000000A			MOV		EBX, 10
 000002DA  F7 FB			IDIV	EBX
					
 000002DC  83 C2 30			ADD		EDX, ZERO							; zero (ASCII)

 000002DF  50				PUSH	EAX
 000002E0  8B C2			MOV		EAX, EDX	
 000002E2  AA				STOSB										; AL -> [EDI]
 000002E3  58				POP		EAX

 000002E4  BA 00000000			MOV		EDX, 0								; reset EDX

 000002E9  FF 45 F4			INC		count

 000002EC  83 F8 00			CMP		EAX, 0								; done when the quotient is zero
 000002EF  75 DE			JNE		_integerAvg

					mDisplayString		EDI, count				; read backward using count
 000002F1  56		     1		PUSH	ESI
 000002F2  51		     1		PUSH	ECX
 000002F3  8B 4D F4	     1		MOV		ECX, count
 000002F6  8B F7	     1		MOV		ESI, EDI	
 000002F8  4E		     1		DEC		ESI	
 000002F9		     1	??0002:	
 000002F9  FD		     1		STD	
 000002FA  AC		     1		LODSB
 000002FB  E8 00000000 E     1		CALL	WriteChar
 00000300  E2 F7	     1		LOOP	??0002
 00000302  FC		     1		CLD
 00000303  59		     1		POP		ECX
 00000304  5E		     1		POP		ESI

				; -------------------------------------
				; conclusion:
				; display farewell_msg
				; -------------------------------------
					; prompt for thank you
 00000305  8B 55 1C			MOV		EDX, [EBP+28]						; OFFSET farewell_msg
 00000308  E8 00000000 E		CALL	WriteString

					; restore registers
 0000030D  59				POP		ECX
 0000030E  5F				POP		EDI
 0000030F  5A				POP		EDX
 00000310  5B				POP		EBX
 00000311  58				POP		EAX
 00000312  5E				POP		ESI

 00000313  C9		   *	    leave  
 00000314  C2 0018			RET		24
 00000317			WriteVal		ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/14/22 07:48:54
$Project 6     (project6_leeginw.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000064A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000317 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Conversion . . . . . . . . . . .	P Near	 000000C4 _TEXT	Length= 000000C7 Public STDCALL
  val  . . . . . . . . . . . . .	DWord	 bp - 00000004
  error  . . . . . . . . . . . .	DWord	 bp - 00000008
  count  . . . . . . . . . . . .	DWord	 bp - 0000000C
  sign . . . . . . . . . . . . .	DWord	 bp - 00000010
  _digitCheck  . . . . . . . . .	L Near	 000000FD _TEXT	
  _minusVal  . . . . . . . . . .	L Near	 00000117 _TEXT	
  _plusVal . . . . . . . . . . .	L Near	 0000011A _TEXT	
  _remainDigit . . . . . . . . .	L Near	 0000011D _TEXT	
  _convert . . . . . . . . . . .	L Near	 00000126 _TEXT	
  _convertLoop . . . . . . . . .	L Near	 00000134 _TEXT	
  _checkedDigit  . . . . . . . .	L Near	 0000014B _TEXT	
  _overFlow  . . . . . . . . . .	L Near	 00000161 _TEXT	
  _error . . . . . . . . . . . .	L Near	 0000016A _TEXT	
  _special . . . . . . . . . . .	L Near	 00000177 _TEXT	
  _return  . . . . . . . . . . .	L Near	 00000182 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000076 _TEXT	Length= 0000004E Public STDCALL
  _getAgain  . . . . . . . . . .	L Near	 0000007D _TEXT	
  _valid . . . . . . . . . . . .	L Near	 000000BB _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000018B _TEXT	Length= 0000018C Public STDCALL
  sum  . . . . . . . . . . . . .	DWord	 bp - 00000004
  avg  . . . . . . . . . . . . .	DWord	 bp - 00000008
  count  . . . . . . . . . . . .	DWord	 bp - 0000000C
  _sumLoop . . . . . . . . . . .	L Near	 000001A6 _TEXT	
  _loadInteger . . . . . . . . .	L Near	 000001E5 _TEXT	
  _integer . . . . . . . . . . .	L Near	 00000203 _TEXT	
  ??0000 . . . . . . . . . . . .	L Near	 0000022D _TEXT	
  _last  . . . . . . . . . . . .	L Near	 00000249 _TEXT	
  _integerSum  . . . . . . . . .	L Near	 00000272 _TEXT	
  ??0001 . . . . . . . . . . . .	L Near	 0000029C _TEXT	
  _integerAvg  . . . . . . . . .	L Near	 000002CF _TEXT	
  ??0002 . . . . . . . . . . . .	L Near	 000002F9 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
introduction . . . . . . . . . .	P Near	 00000065 _TEXT	Length= 00000011 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000065 Public STDCALL
  _readLoop  . . . . . . . . . .	L Near	 00000014 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COMMA  . . . . . . . . . . . . .	Number	 0000002Ch   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LENGTH_LIMIT . . . . . . . . . .	Number	 000001F4h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINUS  . . . . . . . . . . . . .	Number	 0000002Dh   
MIN  . . . . . . . . . . . . . .	Number	 -80000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLUS . . . . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPACE  . . . . . . . . . . . . .	Number	 00000020h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO . . . . . . . . . . . . . .	Number	 00000030h   
array_msg  . . . . . . . . . . .	Byte	 00000192 _DATA	
avg_msg  . . . . . . . . . . . .	Byte	 000001E3 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countAllowed . . . . . . . . . .	DWord	 0000025A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayString  . . . . . . . . .	Byte	 00000456 _DATA	
errorFlag  . . . . . . . . . . .	DWord	 00000452 _DATA	
error_msg  . . . . . . . . . . .	Byte	 0000014A _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_msg . . . . . . . . . .	Byte	 00000216 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 0000022E _DATA	
inputLength  . . . . . . . . . .	DWord	 00000256 _DATA	
inputString  . . . . . . . . . .	Byte	 0000025E _DATA	
input_msg  . . . . . . . . . . .	Byte	 00000122 _DATA	
intro_msg  . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum_msg  . . . . . . . . . . . .	Byte	 000001B6 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
