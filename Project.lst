Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/13/22 05:41:25
$Project 6     (project6_leeginw.asm			     Page 1 - 1


				TITLE Project 6     (project6_leeginw.asm)

				; Author: GinWook Lee
				; Last Modified: 3/11/2022
				; OSU email address: leeginw@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 06                 
				; Due Date: 3/13/2022
				; Description: 
				;	input assumption: 
				;		1) no calculations (e.g., "12379+893", "180-2879", "1123x19")
				;		2) sum of any two integers won't exceed a 32-register

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; ------------------------------------------------------------------------
				; Name: mGetString
				; Description:
				;
				; Receives:
				;	- parameters:
				;
				; ------------------------------------------------------------------------
				mGetString	MACRO		intro, string, count, length
					; preserve registers
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					
					; display input prompt
					MOV		EDX, intro						; OFFSET input_msg
					CALL	WriteString
					
					; read user input
					MOV		EDX, string						; OFFSET inputString
					MOV		ECX, count						; countAllowed (13)
					CALL	ReadString
					MOV		length, EAX
					
					; restore registers
					POP		EAX
					POP		ECX
					POP		EDX

				ENDM

				; ------------------------------------------------------------------------
				; Name: mDisplayString
				; Description:
				;
				; Receives:
				;	- parameters: 
				; ------------------------------------------------------------------------
				mDisplayString MACRO	string, count
					LOCAL	_displayLoop
					; preserve registers
					PUSH	ESI
					PUSH	ECX
					
					MOV		ECX, count

					MOV		ESI, string	
					DEC		ESI	

				_displayLoop:	
					STD	
					LODSB

					CALL	WriteChar
					LOOP	_displayLoop

					CLD

					; restore registers
					POP		ECX
					POP		ESI

				ENDM


				; global constants
 = 00000002			ARRAYSIZE = 2
 = 0000000C			LENGTH_LIMIT = 12								; 12 digits exceed a 32-register (even with a sign char)

 = 7FFFFFFF			MAX = 2147483647								; 2^31 - 1
 =-7FFFFFFF			MIN = -2147483647								; -2^31

				; ASCII 
 = 0000002B			PLUS = 43
 = 0000002D			MINUS = 45
 = 00000030			ZERO = 48
 = 00000039			NINE = 57


 00000000			.data

				; prompt variables
 00000000 50 72 6F 6A 65	intro_msg		BYTE		"Project 6: Low-Level I/O Procedures",13,10
	   63 74 20 36 3A
	   20 4C 6F 77 2D
	   4C 65 76 65 6C
	   20 49 2F 4F 20
	   50 72 6F 63 65
	   64 75 72 65 73
	   0D 0A
 00000025  57 72 69 74 74					BYTE		"Written by GinWook Lee",13,10,13,10
	   65 6E 20 62 79
	   20 47 69 6E 57
	   6F 6F 6B 20 4C
	   65 65 0D 0A 0D
	   0A
 0000003F  50 6C 65 61 73					BYTE		"Please enter 10 signed decimal integers. "
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   20
 00000068  45 61 63 68 20					BYTE		"Each integer needs to be able to fit in a 32-bit register.",13,10
	   69 6E 74 65 67
	   65 72 20 6E 65
	   65 64 73 20 74
	   6F 20 62 65 20
	   61 62 6C 65 20
	   74 6F 20 66 69
	   74 20 69 6E 20
	   61 20 33 32 2D
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 0D 0A
 000000A4  4F 6E 63 65 20					BYTE		"Once all inputs are in, this program will display: ",13,10
	   61 6C 6C 20 69
	   6E 70 75 74 73
	   20 61 72 65 20
	   69 6E 2C 20 74
	   68 69 73 20 70
	   72 6F 67 72 61
	   6D 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 3A
	   20 0D 0A
 000000D9  09 31 29 20 31					BYTE		"	1) 10 valid integers entered",13,10
	   30 20 76 61 6C
	   69 64 20 69 6E
	   74 65 67 65 72
	   73 20 65 6E 74
	   65 72 65 64 0D
	   0A
 000000F8  09 32 29 20 73					BYTE		"	2) sum and average of those integers",13,10,13,10,0
	   75 6D 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 20
	   6F 66 20 74 68
	   6F 73 65 20 69
	   6E 74 65 67 65
	   72 73 0D 0A 0D
	   0A 00

 00000122 50 6C 65 61 73	input_msg		BYTE		"Please enter a signed decimal integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 3A 20 00
 0000014A 45 52 52 4F 52	error_msg		BYTE		"ERROR: your number is either too big or not a signed decimal integer.",13,10,0
	   3A 20 79 6F 75
	   72 20 6E 75 6D
	   62 65 72 20 69
	   73 20 65 69 74
	   68 65 72 20 74
	   6F 6F 20 62 69
	   67 20 6F 72 20
	   6E 6F 74 20 61
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 2E 0D
	   0A 00

 00000192 0D 0A 31 30 20	array_msg		BYTE		13,10,"10 valid integers you entered: ",13,10,0
	   76 61 6C 69 64
	   20 69 6E 74 65
	   67 65 72 73 20
	   79 6F 75 20 65
	   6E 74 65 72 65
	   64 3A 20 0D 0A
	   00
 000001B6 0D 0A 54 68 65	sum_msg			BYTE		13,10,"The sum of 10 valid integers you entered: ",0
	   20 73 75 6D 20
	   6F 66 20 31 30
	   20 76 61 6C 69
	   64 20 69 6E 74
	   65 67 65 72 73
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 3A 20 00
 000001E3 0D 0A 54 68 65	avg_msg			BYTE		13,10,"The truncated average (to the nearest decimal): ", 0
	   20 74 72 75 6E
	   63 61 74 65 64
	   20 61 76 65 72
	   61 67 65 20 28
	   74 6F 20 74 68
	   65 20 6E 65 61
	   72 65 73 74 20
	   64 65 63 69 6D
	   61 6C 29 3A 20
	   00

 00000216 0D 0A 0D 0A 54	farewell_msg	BYTE		13,10,13,10,"Thanks for playing!",0
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   70 6C 61 79 69
	   6E 67 21 00

				; global variables
 0000022E  00000002 [		inputArray		SDWORD		ARRAYSIZE DUP(?)
	    00000000
	   ]

 00000236 00000000		inputLength		DWORD		?
 0000023A 0000000D		countAllowed	DWORD		LENGTH_LIMIT+1
 0000023E  0000000C [		inputString		BYTE		LENGTH_LIMIT DUP(?)
	    00
	   ]

 0000024A  0000000C [		displayString	BYTE		LENGTH_LIMIT DUP(?)
	    00
	   ]

 00000256 2B 2D 30 39		ascii			BYTE		PLUS, MINUS, ZERO, NINE
 0000025A 00000000		signChar		DWORD		?


 00000000			.code
 00000000			main PROC

					; program introduction
 00000000  68 00000000 R		PUSH	OFFSET		intro_msg
 00000005  E8 00000051			CALL	introduction
					
					; read valid user input 10 times
 0000000A  B9 00000002			MOV		ECX, ARRAYSIZE						; set number of valid inputs
 0000000F  BF 0000022E R		MOV		EDI, OFFSET inputArray				; 

 00000014			_readLoop:
 00000014  FF 35 00000236 R		PUSH	inputLength							; EBP+20
 0000001A  FF 35 0000023A R		PUSH	countAllowed						; EBP+16
 00000020  68 0000023E R		PUSH	OFFSET		inputString				; EBP+12
 00000025  68 00000122 R		PUSH	OFFSET		input_msg				; EBP+8
 0000002A  E8 0000003D			CALL	ReadVal	
					
 0000002F  E2 E3			LOOP	_readLoop

					; display integer list with sum and average of those integers
 00000031  68 00000216 R		PUSH	OFFSET		farewell_msg			; EBP+28
 00000036  68 000001E3 R		PUSH	OFFSET		avg_msg					; EBP+24
 0000003B  68 000001B6 R		PUSH	OFFSET		sum_msg					; EBP+20
 00000040  68 0000024A R		PUSH	OFFSET		displayString			; EBP+16
 00000045  68 00000192 R		PUSH	OFFSET		array_msg				; EBP+12
 0000004A  68 0000022E R		PUSH	OFFSET		inputArray				; EBP+8
 0000004F  E8 00000085			CALL	WriteVal

					Invoke ExitProcess,0						; exit to operating system
 00000054  6A 00	   *	    push   +000000000h
 00000056  E8 00000000 E   *	    call   ExitProcess
 0000005B			main ENDP


				; ------------------------------------------------------------------------
				; Name: introduction
				; Description: introduce the program to the user.
				;
				; Preconditions: no precondition.
				; Postconditions: no change.
				;
				; Receives: program introduction and description prompt from 'main' procedure.
				;		- parameter: 'intro_msg' (reference, input)
				; Returns: display program title and description.
				; ------------------------------------------------------------------------
 0000005B			introduction	PROC USES EBP
 0000005B  55		   *	    push   ebp
 0000005C  8B EC			MOV		EBP, ESP
					
 0000005E  52				PUSH	EDX									; preserve register

 0000005F  8B 55 08			MOV		EDX, [EBP+8]						; OFFSET intro_msg
 00000062  E8 00000000 E		CALL	WriteString

 00000067  5A				POP		EDX									; restore register

 00000068  5D		   *	    pop    ebp
 00000069  C2 0004			RET		4
 0000006C			introduction	ENDP

				; ------------------------------------------------------------------------
				; Name: ReadVal
				; Description:
				;
				; Preconditions:
				; Postconditions:
				;		- parameters: 'input_msg' (reference, input)
				; Receives: 
				; Returns:
				; ------------------------------------------------------------------------
 0000006C			ReadVal			PROC USES EBP
 0000006C  55		   *	    push   ebp
 0000006D  8B EC			MOV		EBP, ESP

					; preserve registers
 0000006F  50				PUSH	EAX

					; call macro with parameters: OFFSET intro, OFFSET string, count
					mGetString			[EBP+8], [EBP+12], [EBP+16], [EBP+20]
 00000070  52		     1		PUSH	EDX
 00000071  51		     1		PUSH	ECX
 00000072  50		     1		PUSH	EAX
 00000073  8B 55 08	     1		MOV		EDX, [EBP+8]						; OFFSET input_msg
 00000076  E8 00000000 E     1		CALL	WriteString
 0000007B  8B 55 0C	     1		MOV		EDX, [EBP+12]						; OFFSET inputString
 0000007E  8B 4D 10	     1		MOV		ECX, [EBP+16]						; countAllowed (13)
 00000081  E8 00000000 E     1		CALL	ReadString
 00000086  89 45 14	     1		MOV		[EBP+20], EAX
 00000089  58		     1		POP		EAX
 0000008A  59		     1		POP		ECX
 0000008B  5A		     1		POP		EDX
					
 0000008C  FF 75 14			PUSH	[EBP+20]							; inputLength from mGetString
 0000008F  FF 75 0C			PUSH	[EBP+12]							; OFFSET inputString from mGetString
 00000092  E8 00000006			CALL	Conversion							; 

					; check EAX for invalid sign

					; check for signChar



 00000097  AB				STOSD										; EAX to OFFSET inputArray

					; restore registers
 00000098  58				POP		EAX

 00000099  5D		   *	    pop    ebp
 0000009A  C2 0010			RET		16
 0000009D			ReadVal			ENDP


				; ------------------------------------------------------------------------
				; Name: conversion
				; Description:
				;
				; Preconditions:
				; Postconditions: EAX
				;
				; Receives:
				; Returns:
				; ------------------------------------------------------------------------
 0000009D			Conversion		PROC
					LOCAL	val:SDWORD

					; preserve registers [except for EAX]
 0000009D  55		   *	    push   ebp
 0000009E  8B EC	   *	    mov    ebp, esp
 000000A0  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000000A3  56				PUSH	ESI
 000000A4  51				PUSH	ECX
 000000A5  53				PUSH	EBX
 000000A6  52				PUSH	EDX

				; -------------------------------------
				; conversion!
				;
				; -------------------------------------
					; initial setup
 000000A7  8B 75 08			MOV		ESI, [EBP+8]						; point ESI to inputString from mGetString
 000000AA  8B 4D 0C			MOV		ECX, [EBP+12]						; length of inputString to ECX
 000000AD  C7 45 FC			MOV		val, 0								; initialize val
	   00000000

					; convert valid input to signed integer
					
 000000B4			_convertLoop:
 000000B4  8B 45 FC			MOV		EAX, val							; prep EAX for MUL
 000000B7  BB 0000000A			MOV		EBX, 10
 000000BC  F7 E3			MUL		EBX									; multiply by 10 to increase decimal digit

 000000BE  89 45 FC			MOV		val, EAX							

 000000C1  B8 00000000			MOV		EAX, 0								; reset EAX
					
 000000C6  AC				LODSB										; load one byte from inputString to AL 

 000000C7  2C 30			SUB		AL, 48								; convert ASCII to decimal value	
 000000C9  01 45 FC			ADD		val, EAX							; combine the latest decimal digit

 000000CC  E2 E6			LOOP	_convertLoop						; LOOP until all inputString bytes are converted

 000000CE  8B 45 FC			MOV		EAX, val							; preserve valid numeric value in EAX



				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				; -------------------------------------
				; validation!
				;
				; -------------------------------------
					; initial setup
				;	MOV		ESI, [EBP+8]						; point ESI to inputString from mGetString
				;	MOV		ECX, [EBP+12]						; length of inputString to ECX
				;	MOV		EAX, 0								; initialize EAX


					; first char
				;	DEC		ECX									; adjust count for the first char test

				;	LODSB										; [ESI] -> AL
				;	CALL	isDigit
				;	JNZ		_notDigit

					; if a digit
				;_remaining:
				;	LODSB
				;	CALL	isDigit
				;	JNZ		_invalid
				;	LOOP	_remaining

				;_notDigit:
					; '+' or '-'?

						; if not, _invalid
						; if '+' or '-', update signChar and _remaining
							
							; if '+', ignore and move to the next

							; if '-', 

					; remaining char	


					; exceed


					; _invalid
				;_invalid:
					; error_msg prompt

					

				;	JMP		_return
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



					; restore registers [except for EAX]
 000000D1			_return:
 000000D1  5A				POP		EDX
 000000D2  5B				POP		EBX
 000000D3  59				POP		ECX
 000000D4  5E				POP		ESI

 000000D5  C9		   *	    leave  
 000000D6  C2 0008			RET		8
 000000D9			Conversion		ENDP

				; ------------------------------------------------------------------------
				; Name:
				; Description:
				;
				; Preconditions:
				; Postconditions:
				;
				; Receives:
				;
				; Returns:
				; ------------------------------------------------------------------------
 000000D9			WriteVal		PROC
					LOCAL	sum:SDWORD, avg:SDWORD, count:DWORD

					; preserve registers
 000000D9  55		   *	    push   ebp
 000000DA  8B EC	   *	    mov    ebp, esp
 000000DC  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000000DF  56				PUSH	ESI
 000000E0  50				PUSH	EAX
 000000E1  53				PUSH	EBX
 000000E2  52				PUSH	EDX
 000000E3  57				PUSH	EDI
 000000E4  51				PUSH	ECX

					; 
					
 000000E5  B9 00000002			MOV		ECX, ARRAYSIZE
 000000EA  C7 45 FC			MOV		sum, 0
	   00000000
 000000F1  8B 75 08			MOV		ESI, [EBP+8]						; OFFSET inputArray
					
					; sum calculation
 000000F4			_sumLoop:
 000000F4  AD				LODSD
 000000F5  01 45 FC			ADD		sum, EAX
 000000F8  E2 FA			LOOP	_sumLoop

					; average calculation
 000000FA  C7 45 F8			MOV		avg, 0
	   00000000

 00000101  8B 45 FC			MOV		EAX, sum
 00000104  99				CDQ
 00000105  BB 00000002			MOV		EBX, ARRAYSIZE
 0000010A  F7 FB			IDIV	EBX
					
 0000010C  89 45 F8			MOV		avg, EAX

					; prompt for list of signed integers
 0000010F  8B 55 0C			MOV		EDX, [EBP+12]						; OFFSET array_msg
 00000112  E8 00000000 E		CALL	WriteString

				; -------------------------------------
				; convert number to ASCII: list
				;
				; -------------------------------------
 00000117  B8 00000000			MOV		EAX, 0
 0000011C  BA 00000000			MOV		EDX, 0
 00000121  B9 00000002			MOV		ECX, ARRAYSIZE

 00000126  8B 7D 10			MOV		EDI, [EBP+16]						; OFFSET displayString BYTE
 00000129  8B 75 08			MOV		ESI, [EBP+8]						; OFFSET inputArray SDWORD

 0000012C  C7 45 F4			MOV		count, 2
	   00000002
					
 00000133			_loadInteger:	
 00000133  C6 07 20			MOV		[EDI], BYTE PTR 32					; space
 00000136  47				INC		EDI
 00000137  C6 07 2C			MOV		[EDI], BYTE PTR 44					; comma
 0000013A  47				INC		EDI

 0000013B  AD				LODSD										; [ESI] -> EAX
 0000013C			_integer:		
 0000013C  99				CDQ
 0000013D  BB 0000000A			MOV		EBX, 10
 00000142  F7 FB			IDIV	EBX
					
 00000144  83 C2 30			ADD		EDX, 48
					

 00000147  50				PUSH	EAX

 00000148  8B C2			MOV		EAX, EDX	

 0000014A  AA				STOSB										; AL -> [EDI]
 0000014B  58				POP		EAX

 0000014C  BA 00000000			MOV		EDX, 0

 00000151  FF 45 F4			INC		count

 00000154  83 F8 00			CMP		EAX, 0		
 00000157  75 E3			JNE		_integer

					mDisplayString		EDI, count				; read backward using count
 00000159  56		     1		PUSH	ESI
 0000015A  51		     1		PUSH	ECX
 0000015B  8B 4D F4	     1		MOV		ECX, count
 0000015E  8B F7	     1		MOV		ESI, EDI	
 00000160  4E		     1		DEC		ESI	
 00000161		     1	??0000:	
 00000161  FD		     1		STD	
 00000162  AC		     1		LODSB
 00000163  E8 00000000 E     1		CALL	WriteChar
 00000168  E2 F7	     1		LOOP	??0000
 0000016A  FC		     1		CLD
 0000016B  59		     1		POP		ECX
 0000016C  5E		     1		POP		ESI

 0000016D  C7 45 F4			MOV		count, 0
	   00000000

 00000174  83 F9 02			CMP		ECX, 2
 00000177  74 04			JE		_last

 00000179  83 45 F4 02			ADD		count, 2

 0000017D			_last:
 0000017D  E2 B4			LOOP	_loadInteger


				; -------------------------------------
				; convert number to ASCII: sum
				;
				; -------------------------------------
					; prompt for sum
 0000017F  8B 55 14			MOV		EDX, [EBP+20]						; OFFSET sum_msg
 00000182  E8 00000000 E		CALL	WriteString

 00000187  C7 45 F4			MOV		count, 0
	   00000000
 0000018E  8B 45 FC			MOV		EAX, sum

 00000191			_integerSum:		
 00000191  99				CDQ
 00000192  BB 0000000A			MOV		EBX, 10
 00000197  F7 FB			IDIV	EBX
					
 00000199  83 C2 30			ADD		EDX, 48

 0000019C  50				PUSH	EAX
 0000019D  8B C2			MOV		EAX, EDX	
 0000019F  AA				STOSB										; AL -> [EDI]
 000001A0  58				POP		EAX

 000001A1  BA 00000000			MOV		EDX, 0

 000001A6  FF 45 F4			INC		count

 000001A9  83 F8 00			CMP		EAX, 0		
 000001AC  75 E3			JNE		_integerSum

					mDisplayString		EDI, count				; read backward using count
 000001AE  56		     1		PUSH	ESI
 000001AF  51		     1		PUSH	ECX
 000001B0  8B 4D F4	     1		MOV		ECX, count
 000001B3  8B F7	     1		MOV		ESI, EDI	
 000001B5  4E		     1		DEC		ESI	
 000001B6		     1	??0001:	
 000001B6  FD		     1		STD	
 000001B7  AC		     1		LODSB
 000001B8  E8 00000000 E     1		CALL	WriteChar
 000001BD  E2 F7	     1		LOOP	??0001
 000001BF  FC		     1		CLD
 000001C0  59		     1		POP		ECX
 000001C1  5E		     1		POP		ESI
					
				; -------------------------------------
				; convert number to ASCII: average
				;
				; -------------------------------------

					; prompt for average
 000001C2  8B 55 18			MOV		EDX, [EBP+24]						; OFFSET avg_msg
 000001C5  E8 00000000 E		CALL	WriteString

 000001CA  C7 45 F4			MOV		count, 0
	   00000000
 000001D1  8B 45 F8			MOV		EAX, avg

 000001D4			_integerAverage:		
 000001D4  99				CDQ
 000001D5  BB 0000000A			MOV		EBX, 10
 000001DA  F7 FB			IDIV	EBX
					
 000001DC  83 C2 30			ADD		EDX, 48

 000001DF  50				PUSH	EAX
 000001E0  8B C2			MOV		EAX, EDX	
 000001E2  AA				STOSB										; AL -> [EDI]
 000001E3  58				POP		EAX

 000001E4  BA 00000000			MOV		EDX, 0

 000001E9  FF 45 F4			INC		count

 000001EC  83 F8 00			CMP		EAX, 0		
 000001EF  75 E3			JNE		_integerAverage

					mDisplayString		EDI, count				; read backward using count
 000001F1  56		     1		PUSH	ESI
 000001F2  51		     1		PUSH	ECX
 000001F3  8B 4D F4	     1		MOV		ECX, count
 000001F6  8B F7	     1		MOV		ESI, EDI	
 000001F8  4E		     1		DEC		ESI	
 000001F9		     1	??0002:	
 000001F9  FD		     1		STD	
 000001FA  AC		     1		LODSB
 000001FB  E8 00000000 E     1		CALL	WriteChar
 00000200  E2 F7	     1		LOOP	??0002
 00000202  FC		     1		CLD
 00000203  59		     1		POP		ECX
 00000204  5E		     1		POP		ESI


					; prompt for thank you
 00000205  8B 55 1C			MOV		EDX, [EBP+28]						; OFFSET farewell_msg
 00000208  E8 00000000 E		CALL	WriteString

					; restore registers
 0000020D  59				POP		ECX
 0000020E  5F				POP		EDI
 0000020F  5A				POP		EDX
 00000210  5B				POP		EBX
 00000211  58				POP		EAX
 00000212  5E				POP		ESI

 00000213  C9		   *	    leave  
 00000214  C2 0018			RET		24
 00000217			WriteVal		ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/13/22 05:41:25
$Project 6     (project6_leeginw.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000025E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000217 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Conversion . . . . . . . . . . .	P Near	 0000009D _TEXT	Length= 0000003C Public STDCALL
  val  . . . . . . . . . . . . .	DWord	 bp - 00000004
  _convertLoop . . . . . . . . .	L Near	 000000B4 _TEXT	
  _return  . . . . . . . . . . .	L Near	 000000D1 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000006C _TEXT	Length= 00000031 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000000D9 _TEXT	Length= 0000013E Public STDCALL
  sum  . . . . . . . . . . . . .	DWord	 bp - 00000004
  avg  . . . . . . . . . . . . .	DWord	 bp - 00000008
  count  . . . . . . . . . . . .	DWord	 bp - 0000000C
  _sumLoop . . . . . . . . . . .	L Near	 000000F4 _TEXT	
  _loadInteger . . . . . . . . .	L Near	 00000133 _TEXT	
  _integer . . . . . . . . . . .	L Near	 0000013C _TEXT	
  ??0000 . . . . . . . . . . . .	L Near	 00000161 _TEXT	
  _last  . . . . . . . . . . . .	L Near	 0000017D _TEXT	
  _integerSum  . . . . . . . . .	L Near	 00000191 _TEXT	
  ??0001 . . . . . . . . . . . .	L Near	 000001B6 _TEXT	
  _integerAverage  . . . . . . .	L Near	 000001D4 _TEXT	
  ??0002 . . . . . . . . . . . .	L Near	 000001F9 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
introduction . . . . . . . . . .	P Near	 0000005B _TEXT	Length= 00000011 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000005B Public STDCALL
  _readLoop  . . . . . . . . . .	L Near	 00000014 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 00000002h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LENGTH_LIMIT . . . . . . . . . .	Number	 0000000Ch   
MAX  . . . . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINUS  . . . . . . . . . . . . .	Number	 0000002Dh   
MIN  . . . . . . . . . . . . . .	Number	 -7FFFFFFFh   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NINE . . . . . . . . . . . . . .	Number	 00000039h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLUS . . . . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO . . . . . . . . . . . . . .	Number	 00000030h   
array_msg  . . . . . . . . . . .	Byte	 00000192 _DATA	
ascii  . . . . . . . . . . . . .	Byte	 00000256 _DATA	
avg_msg  . . . . . . . . . . . .	Byte	 000001E3 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countAllowed . . . . . . . . . .	DWord	 0000023A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayString  . . . . . . . . .	Byte	 0000024A _DATA	
error_msg  . . . . . . . . . . .	Byte	 0000014A _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_msg . . . . . . . . . .	Byte	 00000216 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 0000022E _DATA	
inputLength  . . . . . . . . . .	DWord	 00000236 _DATA	
inputString  . . . . . . . . . .	Byte	 0000023E _DATA	
input_msg  . . . . . . . . . . .	Byte	 00000122 _DATA	
intro_msg  . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
signChar . . . . . . . . . . . .	DWord	 0000025A _DATA	
sum_msg  . . . . . . . . . . . .	Byte	 000001B6 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
